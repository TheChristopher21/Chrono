package com.chrono.chrono.services;

import com.chrono.chrono.entities.Payslip;
import org.springframework.stereotype.Service;

import com.itextpdf.text.*;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import java.io.FileOutputStream;
import java.io.IOException;

@Service
public class PdfService {
    public String generatePayslipPdf(Payslip ps) {
        String path = "/tmp/payslip-" + ps.getId() + ".pdf";
        Document doc = new Document();
        try {
            PdfWriter.getInstance(doc, new FileOutputStream(path));
            doc.open();

            // Logo if available
            try {
                java.net.URL logoUrl = getClass().getClassLoader().getResource("static/logo.png");
                if (logoUrl != null) {
                    Image logo = Image.getInstance(logoUrl);
                    logo.scaleToFit(100, 50);
                    doc.add(logo);
                }
            } catch (Exception ignore) {}

            // Header information
            String companyName = ps.getUser() != null && ps.getUser().getCompany() != null
                    ? ps.getUser().getCompany().getName() : "";
            Font headerFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 14);
            doc.add(new Paragraph(companyName, headerFont));
            if (ps.getUser() != null) {
                doc.add(new Paragraph(ps.getUser().getFirstName() + " " + ps.getUser().getLastName()));
                if (ps.getUser().getAddress() != null) {
                    doc.add(new Paragraph(ps.getUser().getAddress()));
                }
            }

            doc.add(new Paragraph("Period: " + ps.getPeriodStart() + " - " + ps.getPeriodEnd()));

            PdfPTable earningsTable = new PdfPTable(2);
            earningsTable.setSpacingBefore(10);
            earningsTable.setWidthPercentage(100);
            earningsTable.addCell(new Phrase("Earnings", headerFont));
            earningsTable.addCell(new Phrase("Amount", headerFont));
            for (var comp : ps.getEarnings()) {
                earningsTable.addCell(comp.getType());
                earningsTable.addCell(String.format("%.2f", comp.getAmount()));
            }
            doc.add(earningsTable);

            PdfPTable dedTable = new PdfPTable(2);
            dedTable.setWidthPercentage(100);
            dedTable.addCell(new Phrase("Deductions", headerFont));
            dedTable.addCell(new Phrase("Amount", headerFont));
            for (var comp : ps.getDeductionsList()) {
                dedTable.addCell(comp.getType());
                dedTable.addCell(String.format("%.2f", comp.getAmount()));
            }
            doc.add(dedTable);

            doc.add(new Paragraph("Gross: " + ps.getGrossSalary()));
            doc.add(new Paragraph("Deductions: " + ps.getDeductions()));
            doc.add(new Paragraph("Net salary: " + ps.getNetSalary()));
            if (ps.getPayoutDate() != null) {
                doc.add(new Paragraph("Payout date: " + ps.getPayoutDate()));
            }
            Paragraph footer = new Paragraph("Generated by Chrono Payroll", FontFactory.getFont(FontFactory.HELVETICA, 8));
            footer.setAlignment(Element.ALIGN_CENTER);
            doc.add(footer);
        } catch (DocumentException | IOException e) {
            return null;
        } finally {
            doc.close();
        }
        return path;
    }
}
